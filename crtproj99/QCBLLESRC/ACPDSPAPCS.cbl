       PROCESS APOST.
      ***************************************************************
       IDENTIFICATION DIVISION.
     H/TITLE Dsp Application Control   Display file
     Z* CRTCBLPGM
     Z* CVTOPT(*DATETIME)
      *
     H* SYNOPSIS :
     H* - Displays the records from DBF as a subfile
     H* - Loads the SFL from the DBF a page at a time
     H* - The DBF record at which the SFL display starts may be
     H*   controlled by positioning fields on the SFL header
     H* - Any key fields on the SFL header will be used as
     H*   positioning values
     H* - Any non-key fields on the SFL header will be used as
     H*   selection values: a maximum of W0SLM records will be
     H*   read from the DBF before giving up
     H* Generated by  : Synon/2E  Version:  1418
     H* Function type : Display file  Version:   0.1
      *
     H* Company    : Vehicle Finance
     H* System     : Vehicle Finance
     H* User name  : OLIVERK1
     H* Date       : 13/05/98 time: 09:12:51
     H* Copyright  : Vehicle Finance
      *
      *==============================================================
     M* MAINTENANCE   :
      *==============================================================
       PROGRAM-ID.  ACPDSPAPCS.
      /EJECT
      ***************************************************************
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER.  IBM-AS400.
       OBJECT-COMPUTER.  IBM-AS400.
       SPECIAL-NAMES.  OPEN-FEEDBACK IS OPEN-FEEDBACK-AREA,
           I-O-FEEDBACK IS I-O-FEEDBACK-AREA.
      /EJECT
      ***************************************************************
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
      *
           SELECT ACPDSPAPCD
             ASSIGN TO WORKSTATION-ACPDSPAPCD-SI
             ORGANIZATION IS TRANSACTION
             ACCESS MODE IS DYNAMIC
             RELATIVE KEY IS ZZRR
             FILE STATUS IS FILE-STATUS, MAJOR-MINOR-CODE.
      *    DSP: Dsp Application Control   Display file
      *
           SELECT ACBATAPPL1
             ASSIGN TO DATABASE-ACBATAPPL1
             ORGANIZATION IS INDEXED
             ACCESS MODE IS DYNAMIC
             RECORD KEY IS EXTERNALLY-DESCRIBED-KEY
             FILE STATUS IS FILE-STATUS.
      *    RTV : Batch Application         Retrieval index
      *
       I-O-CONTROL.
      *
      /EJECT
      ***************************************************************
       DATA DIVISION.
       FILE SECTION.
      *
      *
       FD  ACPDSPAPCD
           LABEL RECORDS ARE STANDARD.
       01  ACPDSPAPCD-F.
           COPY DDS-ALL-FORMATS OF ACPDSPAPCD.
           05 FILLER            PIC X(100).
      *
       FD  ACBATAPPL1
           LABEL RECORDS ARE STANDARD.
       01  ACBATAPPL1-R.
           COPY DDS-ALL-FORMATS OF ACBATAPPL1.
      /EJECT
      ***************************************************************
       WORKING-STORAGE SECTION.
      *
      *    Job context
       01  JOB-CONTEXT.
           COPY DDS-ALL-FORMATS OF Y2PGDSPK.
      *    Job date/time
           03  IJBDTTM.
           05  ZZJDT PIC S9(7).
           05  ZZJDTE REDEFINES ZZJDT.
           07  ZZJCC PIC S9(1).
           07  ZZJYY PIC S9(2).
           07  ZZJMM PIC S9(2).
           07  ZZJDD PIC S9(2).
           05  ZZJTM PIC S9(6).
           05  ZZJTME REDEFINES ZZJTM.
           07  ZZJHH PIC S9(2).
           07  ZZJNN PIC S9(2).
           07  ZZJSS PIC S9(2).
           03  ZZFQL PIC X(21).
           03  ZZFLB PIC X(10).
           03  ZZFFL PIC X(10).
           03  ZZFMB PIC X(10).
           03  ZZCDB PIC X(18).
           03  ZZLDB PIC X(18).
           03  ZZTMS PIC X(26).
       01  ZZTIME.
           03  ZZHNS PIC S9(6).
           03  ZZHH PIC S9(2).
      *
       77  C-IND-OFF PIC 1(1) VALUE B'0'.
       77  C-IND-ON PIC 1(1) VALUE B'1'.
      *
       01  FILE-STATUS PIC X(2).
           88  C-IO-OK VALUE '00'.
           88  C-EOF VALUE '10' '46'.
           88  C-NO-MOD-SFLRCDS VALUE '12'.
           88  C-IO-ERR VALUE '21' '22' '24' '30' '34' '90' '91' '92' '9
      -     '4' '95' '9A' '9H' '9I' '9K' '9M' '9N' '9P'.
           88  C-NO-RECORD VALUE '23'.
           88  C-RECORD-LOCKED VALUE '9D'.
      *
       01  UNTIL-CONDITION PIC 1(1).
           88  C-UNTIL-FALSE VALUE B'0'.
           88  C-UNTIL-TRUE VALUE B'1'.
      *
       01  FOREVER PIC 1(1) VALUE B'1'.
           88  C-FOREVER VALUE B'1'.
      *
       01  WRK-IO-TRASH-AREA PIC X(1).
      *
       01  W0RTN PIC X(7).
       01  W0RSF PIC X(1).
       01  W0ENV PIC X(3).
       01  W0RTW PIC S9(9) COMP-4.
       01  W0ICL PIC X(1).
       01  ZZRRMX PIC S9(5) COMP-3.
       01  KPOS.
      *    Application Code
           03  ANAPPCDE PIC X(2).
       01  KPOS-TMP.
      *    Application Code
           03  ANAPPCDE PIC X(2).
      *
      *..............................................................
      *    Define Full Externally Described Keylist
       01  KPOS-EXT.
      *    Application Code
           03  ANAPPCDE PIC X(2).
      *..............................................................
      *    Application Code
       01  WZAPPCDE PIC X(2).
       01  ZZRROK PIC S9(5) COMP-3.
       01  WKIND0-A.
           03  WKIND0 PIC 1(1) OCCURS 1.
       01  WKIND1-A.
           03  WKIND1 PIC 1(1) OCCURS 1.
       01  ZZRRRD PIC S9(5) COMP-3.
       01  ZZSPG PIC S9(3) COMP-3.
       01  ZZSLIN PIC S9(3) COMP-3.
       01  W0SPG PIC S9(3) COMP-3.
       01  W0RR0 PIC S9(4) COMP-3.
       01  ZZSFLN PIC S9(9) COMP-3.
       01  BB-SELECT-FLAG PIC 1(1).
           88  BB-SELECT-ERROR VALUE B'0'.
           88  BB-SELECT-OK VALUE B'1'.
       01  CAIN81 PIC 1(1).
       01  W0HLP PIC X(1).
       01  W0HPMB PIC X(10).
       01  YYHPFL PIC X(10).
       01  YYHPLB PIC X(10).
       01  ZHCSRW PIC S9(5) COMP-3.
       01  ZHCSCL PIC S9(5) COMP-3.
       01  ZZZCSRW PIC S9(3) COMP-3.
       01  ZZZCSCL PIC S9(3) COMP-3.
       01  YYHLVN PIC X(10).
       01  W0GRP PIC X(10).
       01  YYUSOP PIC X(10).
       01  YYRW PIC S9(5) COMP-3.
       01  YYCL PIC S9(5) COMP-3.
       01  YYLGCT PIC S9(5) COMP-3.
       01  YYLGVN PIC X(10).
       01  ZAPGMQ PIC X(10).
       01  ZAPGRL PIC X(5).
       01  ZAFSMS PIC X(1).
       01  W0DCF PIC X(1).
      *    Outward parameters
       01  PARC.
      *    KEY : Batch Application         Retrieval index
      *    I : RST Application Code
      *    Application Code
           03  PAAPPCDE PIC X(2).
      *
       01  W0CLPG PIC X(10).
       01  YPMTFD PIC X(10).
       01  YAFSCH PIC S9(4) COMP-3.
       01  YZSFRC PIC S9(4) COMP-3.
       01  YZSFDL PIC S9(4) COMP-3.
       01  ZHSTRW PIC S9(4) COMP-3.
       01  ZHNDRW PIC S9(4) COMP-3.
       01  ZHRLEN PIC S9(4) COMP-3.
       01  YPMRRN PIC S9(4) COMP-3.
       01  ZHF4RW PIC S9(4) COMP-3.
       01  ZHWK1Z PIC S9(4) COMP-3.
       01  ZZSFPG PIC S9(3).
       01  W0SLM PIC S9(5) COMP-3.
       01  YSETCS PIC X(1).
       01  WCSRLC PIC X(3).
      *    *Cursor field
       01  W0CFL PIC X(10).
      *    *Cursor row
       01  W0CRW PIC S9(5) COMP-3.
      *    *Cursor column
       01  W0CCL PIC S9(5) COMP-3.
       01  ZINPOS PIC S9(5) COMP-3.
       01  ZAMSID PIC X(7).
       01  ZAMSGF PIC X(10).
       01  ZAMSDA PIC X(132).
       01  ZAMSTP PIC X(7).
       01  ZZRR PIC 9(5) COMP-3.
      *
       01  ACPDSPAPCD-I-O-DSPF.
           COPY DDS-ALL-FORMATS OF Y2IDSPFIO.
      *    Subfile I/O feedback area
      *
       01  MAJOR-MINOR-CODE.
           COPY DDS-ALL-FORMATS OF Y2IMAJMIN.
      *    Display major/minor code for timeouts
      *
       01  ACBATAPPL1-OPEN.
           COPY DDS-ALL-FORMATS OF Y2IOPEN.
      *    Open feedback area
      *
       01  ACPDSPAPCD-WS-O.
           03  ZSFLRCD-WS-O.
           COPY DDS-ZSFLRCD-O OF ACPDSPAPCD.
             06 FILLER            PIC X(1).
           03  ZSFLCTL-WS-O.
           COPY DDS-ZSFLCTL-O OF ACPDSPAPCD.
             06 FILLER            PIC X(1).
           03  ZCMDTXT1-WS-O.
           COPY DDS-ZCMDTXT1-O OF ACPDSPAPCD.
             06 FILLER            PIC X(1).
           03  ZMSGCTL-WS-O.
           COPY DDS-ZMSGCTL-O OF ACPDSPAPCD.
             06 FILLER            PIC X(1).
       01  ACPDSPAPCD-WS-I.
           03  ZSFLRCD-WS-I.
           COPY DDS-ZSFLRCD-I OF ACPDSPAPCD.
             06  FILLER        PIC X.
           03  ZSFLCTL-WS-I.
           COPY DDS-ZSFLCTL-I OF ACPDSPAPCD.
             06  FILLER        PIC X.
           03  ZCMDTXT1-WS-I.
           COPY DDS-ZCMDTXT1-I OF ACPDSPAPCD.
             06  FILLER        PIC X.
           03  ZMSGCTL-WS-I.
           COPY DDS-ZMSGCTL-I OF ACPDSPAPCD.
             06  FILLER        PIC X.
       01  W0OPN PIC X(1).
       01  W0PMT PIC X(1).
      *
      *    Indicators
       01  INDICS.
           03  IND PIC 1(1) OCCURS 99 INDICATOR 1.
           88  C-INDICATOR-ON VALUE B'1'.
           88  C-INDICATOR-OFF VALUE B'0'.
      *
      /EJECT
      ***************************************************************
       LINKAGE SECTION.
      *    Return code
       01  P0RTN PIC X(7).
      ***************************************************************
       PROCEDURE DIVISION USING
             P0RTN
           .
      ***************************************************************
           CONTINUE.
       MAINLINE SECTION.
      *    Initialize
           PERFORM ZZINIT
      *
      *    Initialisation
           MOVE ZZPGM OF JOB-CONTEXT TO ZZPGM OF ZMSGCTL-WS-O
           PERFORM UNTIL NOT (C-FOREVER)
      *        Initialise & load subfile page
               PERFORM BAIZSF
               MOVE 'N' TO W0RSF
      *        Display screen until reload requested
               PERFORM UNTIL NOT (W0RSF = 'N')
      *            Display screen
                   PERFORM CAEXFM
      *            Process response
      *            EVALUATE
      *                Cancel & exit program
                       IF (C-INDICATOR-ON(03) OR
                           C-INDICATOR-ON(12)) THEN
                           PERFORM ZXEXPG
      *                HOME: Request subfile reload
                       ELSE IF (C-INDICATOR-ON(05)) THEN
                           PERFORM FBRQRL
      *                Display next SFL page
                       ELSE IF (C-INDICATOR-ON(27)) THEN
                           PERFORM BBLDSF
      *                Process screen input
                       ELSE
                           PERFORM DAPRZZ
                   END-IF END-IF END-IF
      *
               END-PERFORM
           END-PERFORM
      ***************************************************************
           CONTINUE.
      /EJECT
       BAIZSF SECTION.
      *==============================================================
      *    Initialise & load subfile page
      *==============================================================
      *    Clear subfile
           SET C-INDICATOR-ON(80) TO TRUE
           WRITE ACPDSPAPCD-F FROM ZSFLCTL-WS-O
             FORMAT IS 'ZSFLCTL' INDICATORS ARE INDICS
           END-WRITE
           SET C-INDICATOR-OFF(80) TO TRUE
           SET C-INDICATOR-OFF(81) TO TRUE
      *    Reset no of records in subfile
           MOVE ZERO TO ZZRRMX
      *    Position DBF file
      *    Setup key
      *    Application Code
           MOVE Z2APPCDE OF ZSFLCTL-WS-O TO ANAPPCDE OF KPOS
      *    Initialise Full Externally Described Keylist
      *    Application Code
           MOVE SPACES TO ANAPPCDE OF KPOS-EXT
           MOVE CORRESPONDING
             KPOS-EXT TO
             FBTAPBS OF ACBATAPPL1-R
           MOVE CORRESPONDING
             KPOS TO
             FBTAPBS OF ACBATAPPL1-R
           START ACBATAPPL1 KEY NOT < EXTERNALLY-DESCRIBED-KEY
             FORMAT IS 'FBTAPBS'
           END-START
           IF (C-IO-ERR) THEN
               STOP RUN
           END-IF
           SET C-INDICATOR-OFF(82) TO TRUE
           SET C-INDICATOR-OFF(87) TO TRUE
           READ ACBATAPPL1 NEXT
             FORMAT IS 'FBTAPBS'
           END-READ
           IF (C-EOF) THEN
               SET C-INDICATOR-ON(82) TO TRUE
           ELSE
               IF (C-IO-ERR) THEN
                   SET C-INDICATOR-ON(87) TO TRUE
               END-IF
           END-IF
      *    Save previous selector values
      *    Application Code
           MOVE Z2APPCDE OF ZSFLCTL-WS-O TO WZAPPCDE
      *    Load subfile page
           MOVE ZERO TO ZZRROK
           PERFORM BBLDSF
      *==============================================================
           CONTINUE.
       BAEXIT.
           EXIT.
      /EJECT
       BBLDSF SECTION.
      *==============================================================
      *    Load subfile page
      *==============================================================
      *    Re-establish fields in read-ahead record
           IF (C-INDICATOR-OFF(82)) THEN
               IF (C-INDICATOR-ON(27)) THEN
                   SET C-INDICATOR-OFF(90) TO TRUE
                   READ ACBATAPPL1 PRIOR
                     FORMAT IS 'FBTAPBS'
                   END-READ
                   IF (C-EOF) THEN
                       SET C-INDICATOR-ON(90) TO TRUE
                   ELSE
                       IF (C-IO-ERR) THEN
                           STOP RUN
                       END-IF
                   END-IF
                   SET C-INDICATOR-OFF(90) TO TRUE
                   READ ACBATAPPL1 NEXT
                     FORMAT IS 'FBTAPBS'
                   END-READ
                   IF (C-EOF) THEN
                       SET C-INDICATOR-ON(90) TO TRUE
                   ELSE
                       IF (C-IO-ERR) THEN
                           STOP RUN
                       END-IF
                   END-IF
               END-IF
           END-IF
      *
      *    Setof record error indicators
           MOVE ALL '0' TO WKIND0-A
           MOVE ALL '1' TO WKIND1-A
           MOVE WKIND0(1) TO IND(32)
      *    Start at previous highest record in SFL
           MOVE ZZRRMX TO ZZRR
      *    Reset count of DBF records read
           MOVE ZERO TO ZZRRRD
      *    Set required pages based on *Set Cursor or *Subfile Pages
           IF (W0RR0 > 0) THEN
               DIVIDE W0RR0 BY ZZSFPG GIVING ZZSPG REMAINDER ZZSLIN
               IF (ZZSLIN > 0) THEN
                   ADD 1 TO ZZSPG
               END-IF
               IF (W0SPG > ZZSPG) THEN
                   MOVE W0SPG TO ZZSPG
               END-IF
           ELSE
               MOVE W0SPG TO ZZSPG
           END-IF
      *    Compute lines required based on pages
           MULTIPLY ZZSPG BY ZZSFPG GIVING ZZSFLN
           IF (ZZSFLN > 999) THEN
               MOVE 999 TO ZZSFLN
           END-IF
      *..............................................................
      *    Load next SFL page until SFL page full, or
      *    Scan limit reached
           PERFORM UNTIL NOT (C-INDICATOR-OFF(82) AND
                              ZZRROK < ZZSFLN AND
                              ZZRRRD < W0SLM)
      *        Check selection fields - if fail, read next record
               SET BB-SELECT-OK TO TRUE
               IF (BB-SELECT-OK) THEN
      *            Load SFL fields
                   PERFORM MBFLZ1
      *            Output to subfile
                   ADD 1 TO ZZRR
                   IF (ZZRR > ZERO) THEN
                       SET C-INDICATOR-ON(81) TO TRUE
                   ELSE
                       SET C-INDICATOR-OFF(81) TO TRUE
                   END-IF
                   ADD 1 TO ZZRROK
      *            If SFLRCD invalid, note that errors present
                   IF (C-INDICATOR-ON(98) AND
                       C-INDICATOR-OFF(99)) THEN
                       SET C-INDICATOR-ON(99) TO TRUE
                   END-IF
                   WRITE SUBFILE ACPDSPAPCD-F FROM ZSFLRCD-WS-O
                     FORMAT IS 'ZSFLRCD' INDICATORS ARE INDICS
                   END-WRITE
               END-IF
      *        Increment scan check count
               ADD 1 TO ZZRRRD
               SET C-INDICATOR-OFF(82) TO TRUE
               READ ACBATAPPL1 NEXT
                 FORMAT IS 'FBTAPBS'
               END-READ
               IF (C-EOF) THEN
                   SET C-INDICATOR-ON(82) TO TRUE
               ELSE
                   IF (C-IO-ERR) THEN
                       STOP RUN
                   END-IF
               END-IF
           END-PERFORM
      *..............................................................
      *    If no DBF records found, display error message
           IF (ZZRR = ZERO AND
               C-INDICATOR-ON(82)) THEN
      *        Send message '*No data to display'
      *        Message ID
               MOVE 'Y2U0008' TO ZAMSID
      *        Message file
               MOVE 'Y2USRMSG' TO ZAMSGF
               PERFORM ZASNMS
           END-IF
      *
      *..............................................................
      *    Save highest SFL record load can continue at end point
           IF (ZZRR > ZZRRMX) THEN
      *        Calculate top line
               DIVIDE ZZRROK BY ZZSFPG GIVING ZZSPG REMAINDER ZZSLIN
               IF (ZZSLIN > 0) THEN
                   SUBTRACT ZZSLIN FROM ZZRR GIVING ZZSFRC OF
                     ZSFLCTL-WS-O
               ELSE
                   SUBTRACT ZZSFPG FROM ZZRR GIVING ZZSFRC OF
                     ZSFLCTL-WS-O
               END-IF
               ADD 1 TO ZZSFRC OF ZSFLCTL-WS-O
               MOVE ZZRR TO ZZRRMX
           END-IF
      *    If scan limit reached, display error message
           IF (ZZRRRD NOT < W0SLM) THEN
      *        Send message '*Scan limit reached'
      *        Message ID
               MOVE 'Y2U0017' TO ZAMSID
      *        Message file
               MOVE 'Y2USRMSG' TO ZAMSGF
               PERFORM ZASNMS
           ELSE
               MOVE ZERO TO ZZRROK
           END-IF
      *==============================================================
           CONTINUE.
       BBEXIT.
           EXIT.
      /EJECT
       CAEXFM SECTION.
      *==============================================================
      *    Display screen
      *==============================================================
           SET C-UNTIL-FALSE TO TRUE
           PERFORM UNTIL (C-UNTIL-TRUE)
               MOVE 'N' TO W0HLP
      *        PUTOVR unless conditioned fields change
               SET C-INDICATOR-ON(86) TO TRUE
               IF (IND(81) NOT = CAIN81) THEN
                   SET C-INDICATOR-OFF(86) TO TRUE
               END-IF
               MOVE IND(81) TO CAIN81
      *        Set cursor by *SET CURSOR data
               IF (YSETCS = 'Y') THEN
                   PERFORM Y0SET
               END-IF
               WRITE ACPDSPAPCD-F FROM ZMSGCTL-WS-O
                 FORMAT IS 'ZMSGCTL' INDICATORS ARE INDICS
               END-WRITE
               WRITE ACPDSPAPCD-F FROM ZCMDTXT1-WS-O
                 FORMAT IS 'ZCMDTXT1' INDICATORS ARE INDICS
               END-WRITE
               WRITE ACPDSPAPCD-F FROM ZSFLCTL-WS-O
                 FORMAT IS 'ZSFLCTL' INDICATORS ARE INDICS
               END-WRITE
               READ ACPDSPAPCD INTO ZSFLCTL-WS-I
                 FORMAT IS 'ZSFLCTL' INDICATORS ARE INDICS
               END-READ
               MOVE CORRESPONDING
                 ZSFLCTL-I OF ZSFLCTL-WS-I TO
                 ZSFLCTL-O OF ZSFLCTL-WS-O
      *        Maintain subfile position where possible
               ACCEPT ACPDSPAPCD-I-O-DSPF FROM I-O-FEEDBACK-AREA FOR
                 ACPDSPAPCD
               IF (ZZSFRC OF ACPDSPAPCD-I-O-DSPF > ZERO) THEN
                   MOVE ZZSFRC OF ACPDSPAPCD-I-O-DSPF TO ZZSFRC OF
                     ZSFLCTL-WS-O
               END-IF
      *
      *        Test cursor
               PERFORM Y8TST
      *        Check if prompt requested
               PERFORM ZDVPMT
      *        Reset help request
      *        Clear set cursor DDS indicator
               IF (WCSRLC = 'OFF') THEN
                   SET C-INDICATOR-OFF(94) TO TRUE
               END-IF
               MOVE SPACES TO WCSRLC
      *        If help requested, display help text
               IF (C-INDICATOR-ON(25)) THEN
                   PERFORM ZHHPKY
               END-IF
           IF (W0HLP = 'N') THEN
             SET C-UNTIL-TRUE TO TRUE
           END-IF
           END-PERFORM
      *    Update job time
           ACCEPT ZZTIME FROM TIME
           MOVE ZZHNS TO ZZJTM
      *    Clear messages from program message queue
           MOVE ZZPGM OF JOB-CONTEXT TO ZAPGMQ
           MOVE '*SAME' TO ZAPGRL
           CALL 'Y2CLMSC' USING
             ZAPGMQ
             ZAPGRL
           END-CALL
      *    Reset first message only flag
           MOVE 'Y' TO ZAFSMS
           SET C-INDICATOR-OFF(99) TO TRUE
           SET C-INDICATOR-OFF(83) TO TRUE
           SET C-INDICATOR-OFF(92) TO TRUE
           IF (YSETCS = 'Y') THEN
               PERFORM Y9CLR
           END-IF
      *==============================================================
           CONTINUE.
       CAEXIT.
           EXIT.
      /EJECT
       DAPRZZ SECTION.
      *==============================================================
      *    Process screen input
      *==============================================================
      *    Confirm/update is not deferred
           MOVE 'N' TO W0DCF
           IF (YPMTFD NOT = SPACES AND
               YPMRRN = ZERO) THEN
               GO DAEXIT
           END-IF
           IF (YPMTFD NOT = SPACES) THEN
               GO DATAG1
           END-IF
      *    EVALUATE
      *        Change of position specified
               IF (WZAPPCDE NOT = Z2APPCDE OF ZSFLCTL-WS-O) THEN
                   PERFORM FBRQRL
           END-IF
           CONTINUE.
       DATAG1.
           IF (YPMTFD = SPACES) THEN
      *        USER: Process subfile control (Pre-confirm)
      *        CASE: CTL.*CMD key is *Previous panel
      *        *IF
               IF (C-INDICATOR-ON(12)) THEN
      *            *Return code
                   MOVE 'Y2U9998' TO P0RTN
                   PERFORM ZYEXPG
               END-IF
           END-IF
           IF (YPMTFD = SPACES) THEN
      *        Reload subfile requested?
               IF (W0RSF = 'Y') THEN
                 GO DAEXIT
               END-IF
           END-IF
           IF (C-INDICATOR-ON(81)) THEN
      *        Process subfile records
               PERFORM DBPRSF
           END-IF
           IF (YPMTFD NOT = SPACES) THEN
               GO DAEXIT
           END-IF
      *    If error, quit processing
           IF (C-INDICATOR-ON(99)) THEN
             GO DAEXIT
           END-IF
      *    Defer confirm/update requested
           IF (W0DCF = 'Y') THEN
             GO DAEXIT
           END-IF
      *==============================================================
           CONTINUE.
       DAEXIT.
           EXIT.
      /EJECT
       DBPRSF SECTION.
      *==============================================================
      *    Process modified subfile record
      *==============================================================
      *    Read first changed slf record
           IF (YAFSCH NOT = ZERO) THEN
               MOVE YAFSCH TO ZZRR
               READ SUBFILE ACPDSPAPCD INTO ZSFLRCD-WS-I
                 FORMAT IS 'ZSFLRCD' INDICATORS ARE INDICS
               END-READ
               IF (C-NO-RECORD) THEN
                   SET C-INDICATOR-ON(92) TO TRUE
               ELSE
                   SET C-INDICATOR-OFF(92) TO TRUE
               END-IF
           ELSE
      *        Read first changed record, if any
               READ SUBFILE ACPDSPAPCD NEXT MODIFIED INTO ZSFLRCD-WS-I
                 FORMAT IS 'ZSFLRCD' INDICATORS ARE INDICS
               END-READ
               IF (C-NO-MOD-SFLRCDS) THEN
                   SET C-INDICATOR-ON(92) TO TRUE
               ELSE
                   SET C-INDICATOR-OFF(92) TO TRUE
               END-IF
           END-IF
           IF (C-IO-OK) THEN
               MOVE CORRESPONDING
                 ZSFLRCD-I OF ZSFLRCD-WS-I TO
                 ZSFLRCD-O OF ZSFLRCD-WS-O
           END-IF
           PERFORM UNTIL NOT (C-INDICATOR-OFF(92))
      *        Process subfile records
               PERFORM DCPRSR
               REWRITE SUBFILE ACPDSPAPCD-F FROM ZSFLRCD-WS-O
                 FORMAT IS 'ZSFLRCD' INDICATORS ARE INDICS
               END-REWRITE
               READ SUBFILE ACPDSPAPCD NEXT MODIFIED INTO ZSFLRCD-WS-I
                 FORMAT IS 'ZSFLRCD' INDICATORS ARE INDICS
               END-READ
               IF (C-NO-MOD-SFLRCDS) THEN
                   SET C-INDICATOR-ON(92) TO TRUE
               ELSE
                   SET C-INDICATOR-OFF(92) TO TRUE
               END-IF
               IF (C-INDICATOR-OFF(92)) THEN
                   MOVE CORRESPONDING
                     ZSFLRCD-I OF ZSFLRCD-WS-I TO
                     ZSFLRCD-O OF ZSFLRCD-WS-O
               END-IF
           END-PERFORM
      *==============================================================
           CONTINUE.
       DBEXIT.
           EXIT.
      /EJECT
       DCPRSR SECTION.
      *==============================================================
      *    Process subfile record
      *==============================================================
      *    Setof error indicators and SFLNXTCHG
           MOVE WKIND0(1) TO IND(32)
           SET C-INDICATOR-OFF(98) TO TRUE
           IF (YPMTFD NOT = SPACES) THEN
               GO DCEXIT
           END-IF
      *    USER: Process subfile record (Pre-confirm)
      *    CASE: RCD.*SFLSEL is *Edit
      *    *IF
           IF (Z1SEL OF ZSFLRCD-WS-O = '2') THEN
      *        Edt Application Control - Batch Application  * 
               INITIALIZE PARC
      *        Application Code
               MOVE SPACES TO PAAPPCDE
               MOVE Z1APPCDE OF ZSFLRCD-WS-O TO PAAPPCDE
      *
      *        Return code
               MOVE SPACES TO W0RTN
      *
               SET C-INDICATOR-OFF(90) TO TRUE
               CALL 'ACPEDTAPCS' USING
      *        Return code
                 W0RTN
      *        KEY : Batch Application
                 PARC
                        ON OVERFLOW
                        SET C-INDICATOR-ON(90) TO TRUE
               END-CALL
      *
      *        Error on program call will terminate run unit
      *
               IF (C-INDICATOR-ON(90)) THEN
                   MOVE 'Y2U0032' TO W0RTN
                   MOVE 'ACPEDTAPCS' TO W0CLPG
      *            Send message '*Error occured on CALL...'
      *            Message ID
                   MOVE 'Y2U0032' TO ZAMSID
      *            Message file
                   MOVE 'Y2USRMSG' TO ZAMSGF
      *            Message data
                   MOVE W0CLPG TO ZAMSDA
                   PERFORM ZASNMS
               END-IF
      *        Error detected?
               IF (W0RTN NOT = SPACES) THEN
                   SET C-INDICATOR-ON(98) TO TRUE
               END-IF
      *        Utl Monitor Return code
      *        CASE: PGM.*Return code is *User Fast Exit Requested
      *        *IF
               IF (W0RTN = 'Y2U9999') THEN
      *            *Return code
                   MOVE W0RTN TO P0RTN
                   PERFORM ZYEXPG
               ELSE
      *            CASE: *OTHERWISE
      *            *Return code
                   MOVE SPACES TO W0RTN
               END-IF
           END-IF
           IF (C-INDICATOR-ON(98)) THEN
      *        SFLRCD invalid
               IF (C-INDICATOR-OFF(99)) THEN
                   MOVE ZZRR TO ZZSFRC OF ZSFLCTL-WS-O
                   IF (ZZSFRC OF ZSFLCTL-WS-O > ZERO) THEN
                       SET C-INDICATOR-ON(99) TO TRUE
                   ELSE
                       SET C-INDICATOR-OFF(99) TO TRUE
                   END-IF
               END-IF
      *        Condition SFLNXTCHG
               SET C-INDICATOR-ON(84) TO TRUE
           ELSE
      *        SFLRCD valid
               SET C-INDICATOR-OFF(84) TO TRUE
               MOVE SPACES TO Z1SEL OF ZSFLRCD-WS-O
           END-IF
      *==============================================================
           CONTINUE.
       DCEXIT.
           EXIT.
      /EJECT
       FBRQRL SECTION.
      *==============================================================
      *    Request subfile reload
      *==============================================================
           MOVE 'Y' TO W0RSF
      *==============================================================
           CONTINUE.
       FBEXIT.
           EXIT.
      /EJECT
       MBFLZ1 SECTION.
      *==============================================================
      *    Move FBTAPBS fields to subfile
      *==============================================================
      *    User Description
           MOVE ANUSRDES OF FBTAPBS TO Z1USRDES OF ZSFLRCD-WS-O
      *    Created by User
           MOVE ANUSRCRT OF FBTAPBS TO Z1USRCRT OF ZSFLRCD-WS-O
      *    Date Created
           MOVE ANDTECRT OF FBTAPBS TO Z1DTECRT OF ZSFLRCD-WS-O
      *    Update Flag
           MOVE ANUPDFLG OF FBTAPBS TO Z1UPDFLG OF ZSFLRCD-WS-O
      *    Multi Journal Flag
           MOVE ANMJRNFLG OF FBTAPBS TO Z1MJRNFLG OF ZSFLRCD-WS-O
      *    Application Code
           MOVE ANAPPCDE OF FBTAPBS TO Z1APPCDE OF ZSFLRCD-WS-O
      *    Application Description
           MOVE ANAPPDES OF FBTAPBS TO Z1APPDES OF ZSFLRCD-WS-O
      *    *SFLSEL
           MOVE SPACES TO Z1SEL OF ZSFLRCD-WS-O
      *==============================================================
           CONTINUE.
       MBEXIT.
           EXIT.
      /EJECT
       MEIZZ2 SECTION.
      *==============================================================
      *    Initialise subfile control
      *==============================================================
      *    Application Code
           MOVE SPACES TO Z2APPCDE OF ZSFLCTL-WS-O
      *==============================================================
           CONTINUE.
       MEEXIT.
           EXIT.
      /EJECT
       Y0SET  SECTION.
      *==============================================================
      *    Set cursor by *SET CURSOR data
      *==============================================================
      *==============================================================
           CONTINUE.
       Y0EXIT.
           EXIT.
      /EJECT
       Y8TST  SECTION.
      *==============================================================
      *    Test cursor
      *==============================================================
           ACCEPT ACPDSPAPCD-I-O-DSPF FROM I-O-FEEDBACK-AREA
            FOR ACPDSPAPCD
           MOVE ZZRWCL OF ACPDSPAPCD-I-O-DSPF TO ZINPOS
           MOVE SPACES TO W0CFL
           DIVIDE ZINPOS BY 256 GIVING W0CRW REMAINDER W0CCL
      *==============================================================
           CONTINUE.
       Y8EXIT.
           EXIT.
      /EJECT
       Y9CLR  SECTION.
      *==============================================================
      *    Clear *SET CURSOR data
      *==============================================================
      *==============================================================
           CONTINUE.
       Y9EXIT.
           EXIT.
      /EJECT
       ZASNMS SECTION.
      *==============================================================
      *    Send message to program's message queue
      *==============================================================
      *    Send if first error message or not an error message
           IF (ZAMSTP NOT = SPACES OR
               ZAFSMS NOT = 'N') THEN
               IF (ZAMSTP = SPACES) THEN
      *            Signal first error message sent
                   MOVE 'N' TO ZAFSMS
               END-IF
               IF (ZAPGMQ = SPACES) THEN
                   MOVE ZZPGM OF JOB-CONTEXT TO ZAPGMQ
               END-IF
               CALL 'Y2SNMGC' USING
      *        Program queue
                 ZAPGMQ
      *        Relative queue
                 ZAPGRL
      *        Message ID
                 ZAMSID
      *        Message file
                 ZAMSGF
      *        Message data
                 ZAMSDA
      *        Message type
                 ZAMSTP
               END-CALL
           END-IF
      *    Clear all fields for default mechanism next time
      *    Program queue
           MOVE SPACES TO ZAPGMQ
      *    Relative queue
           MOVE SPACES TO ZAPGRL
      *    Message ID
           MOVE SPACES TO ZAMSID
      *    Message file
           MOVE SPACES TO ZAMSGF
      *    Message data
           MOVE SPACES TO ZAMSDA
      *    Message type
           MOVE SPACES TO ZAMSTP
      *==============================================================
           CONTINUE.
       ZAEXIT.
           EXIT.
      /EJECT
       ZDVPMT SECTION.
      *==============================================================
      *    Process prompt request
      *==============================================================
      *
      *    Initialise prompt workfields
           MOVE SPACES TO YPMTFD
           MOVE ZERO TO YAFSCH
           MOVE ZERO TO YPMRRN
      *
           IF (C-INDICATOR-ON(04)) THEN
               SET C-INDICATOR-ON(04) TO TRUE
      *
      *        Extract cursor row and column
               ACCEPT ACPDSPAPCD-I-O-DSPF
               FROM I-O-FEEDBACK-AREA FOR ACPDSPAPCD
               DIVIDE ZZRWCL BY 256 GIVING ZHCSRW REMAINDER ZHCSCL
      *        Save cursor position for redisplay
      *        Row
               MOVE ZEROS TO ZZZCSRW
               MOVE ZHCSRW TO ZZZCSRW
      *        Column
               MOVE ZEROS TO ZZZCSCL
               MOVE ZHCSCL TO ZZZCSCL
      *
      *        Save sfl rrn at top of page
               IF (ZZSFRC OF ACPDSPAPCD-I-O-DSPF > ZERO) THEN
                   MOVE ZZSFRC OF ACPDSPAPCD-I-O-DSPF TO ZZSFRC OF
                     ZSFLCTL-WS-O
               END-IF
               MOVE ZZSFRC OF ACPDSPAPCD-I-O-DSPF TO YZSFRC
      *
      *        Initialise sfl workfields
               MOVE 009 TO ZHSTRW
               MOVE 020 TO ZHNDRW
               MOVE 001 TO ZHRLEN
               MOVE ZERO TO ZHF4RW
               MOVE ZERO TO ZHWK1Z
      *
      *        Resolve prompt row number on sfl
               IF (ZHCSRW NOT < ZHSTRW AND
                   ZHCSRW NOT > ZHNDRW) THEN
                   SUBTRACT ZHSTRW FROM ZHCSRW GIVING ZHWK1Z
                   DIVIDE ZHWK1Z BY ZHRLEN GIVING ZHWK1Z
                   MOVE ZHWK1Z TO YZSFDL
                   MULTIPLY ZHWK1Z BY ZHRLEN GIVING ZHWK1Z
                   SUBTRACT ZHWK1Z FROM ZHCSRW GIVING ZHF4RW
               END-IF
      *
               IF (YPMTFD = SPACES) THEN
      *            Error if user defined prompting is not specified.
                   IF (W0PMT = 'N') THEN
                       MOVE '*NONE' TO YPMTFD
                       MOVE 'Y' TO W0HLP
                       MOVE 'Y' TO ZAFSMS
      *                Send error message.
      *                Message ID
                       MOVE 'Y2U0101' TO ZAMSID
      *                Message file
                       MOVE 'Y2USRMSG' TO ZAMSGF
                       PERFORM ZASNMS
                   END-IF
               END-IF
      *
      *        Save first changed  rrn
               IF (ZHCSRW NOT < ZHSTRW AND
                   ZHCSRW NOT > ZHNDRW AND
                   YPMTFD NOT = '*NONE') THEN
      *
                   IF (ZZRR NOT = ZERO) THEN
                       READ SUBFILE ACPDSPAPCD NEXT MODIFIED INTO
                         ZSFLRCD-WS-I
                         FORMAT IS 'ZSFLRCD' INDICATORS ARE INDICS
                       END-READ
                       IF (NOT C-NO-MOD-SFLRCDS) THEN
                           MOVE CORRESPONDING
                             ZSFLRCD-I OF ZSFLRCD-WS-I TO
                             ZSFLRCD-O OF ZSFLRCD-WS-O
                           MOVE ZZRR TO YAFSCH
                           SET C-INDICATOR-ON(84) TO TRUE
                           REWRITE SUBFILE ACPDSPAPCD-F FROM
                             ZSFLRCD-WS-O
                             FORMAT IS 'ZSFLRCD' INDICATORS ARE INDICS
                           END-REWRITE
                       END-IF
                   END-IF
      *
      *            Calculate rrn for prompt slf record
                   SUBTRACT ZHSTRW FROM ZHCSRW GIVING ZHWK1Z
                   DIVIDE ZHWK1Z BY ZHRLEN GIVING ZHWK1Z
                   ADD ZHWK1Z TO YZSFRC GIVING YPMRRN
      *
      *            Chain to sfl record
                   MOVE YPMRRN TO ZZRR
                   READ SUBFILE ACPDSPAPCD INTO ZSFLRCD-WS-I
                     FORMAT IS 'ZSFLRCD' INDICATORS ARE INDICS
                   END-READ
                   IF (NOT C-NO-RECORD) THEN
                       MOVE CORRESPONDING
                         ZSFLRCD-I OF ZSFLRCD-WS-I TO
                         ZSFLRCD-O OF ZSFLRCD-WS-O
                       SET C-INDICATOR-ON(84) TO TRUE
                       REWRITE SUBFILE ACPDSPAPCD-F FROM ZSFLRCD-WS-O
                         FORMAT IS 'ZSFLRCD' INDICATORS ARE INDICS
                       END-REWRITE
                   ELSE
                       MOVE ZERO TO YPMRRN
                   END-IF
      *
      *            Test first changed rrn/prompt rrn
                   IF (YAFSCH = ZERO) THEN
                       MOVE YPMRRN TO YAFSCH
                   END-IF
      *
      *            If prompt rrn < first changed rrn
                   IF (YPMRRN NOT = ZERO AND
                       YPMRRN < YAFSCH) THEN
                       MOVE YPMRRN TO YAFSCH
                   END-IF
      *
               END-IF
      *
           END-IF
      *==============================================================
           CONTINUE.
       ZDEXIT.
           EXIT.
      /EJECT
       ZHHPKY SECTION.
      *==============================================================
      *    Display HELP text
      *==============================================================
      *    Signal help request
           MOVE 'Y' TO W0HLP
      *
      *    Extract cursor row and column
           ACCEPT ACPDSPAPCD-I-O-DSPF FROM I-O-FEEDBACK-AREA FOR
             ACPDSPAPCD
           DIVIDE ZZRWCL BY 256 GIVING ZHCSRW REMAINDER ZHCSCL
      *
      *    Save cursor position for redisplay
      *    Row
           MOVE ZEROS TO ZZZCSRW
           ADD ZHCSRW TO ZZZCSRW
      *    Column
           MOVE ZEROS TO ZZZCSCL
           ADD ZHCSCL TO ZZZCSCL
      *
           MOVE 'ACPDSPAPH' TO W0HPMB
           MOVE SPACES TO YYHPFL
           MOVE SPACES TO YYHPLB
           MOVE '*START' TO YYHLVN
           MOVE '*NORMAL' TO YYUSOP
           MOVE ZHCSRW TO YYRW
           MOVE ZHCSCL TO YYCL
           MOVE ZEROS  TO YYLGCT
           MOVE SPACES TO YYLGVN
           CALL 'YDDSHPR' USING
      *    Member name
             W0HPMB
      *    *DFT text file
             YYHPFL
      *    Help text library
             YYHPLB
      *    Return code
             W0RTN
      *    Help label
             YYHLVN
      *    Options
             YYUSOP
      *    Row
             YYRW
      *    Column
             YYCL
      *    # of grps
             YYLGCT
      *    Label grps
             YYLGVN
           END-CALL
      *
      *    Clear set cursor DDS indicator
           IF (C-INDICATOR-OFF(94)) THEN
               MOVE 'OFF' TO WCSRLC
               SET C-INDICATOR-ON(94) TO TRUE
           END-IF
      *==============================================================
           CONTINUE.
       ZHEXIT.
           EXIT.
      /EJECT
       ZXEXPG SECTION.
      *==============================================================
      *    Cancel & exit program
      *==============================================================
           PERFORM ZYEXPG
      *==============================================================
           CONTINUE.
       ZXEXIT.
           EXIT.
      /EJECT
       ZYEXPG SECTION.
      *==============================================================
      *    Exit program: Direct
      *==============================================================
           CLOSE ACPDSPAPCD
           CLOSE ACBATAPPL1
      *    Reset entry parameters as appropriate
           PERFORM ZZEXPM.
      *    Exit program
           CONTINUE.
       ZYEXPG-EXIT.
           GOBACK.
      *==============================================================
           CONTINUE.
       ZYEXIT.
           EXIT.
      /EJECT
       ZZEXPM SECTION.
      *==============================================================
      *    Return parameters from work fields
      *==============================================================
      *==============================================================
           CONTINUE.
       ZZPEXT.
           EXIT.
      /EJECT
       ZZINIT SECTION.
      *==============================================================
      *    Initialisation
      *==============================================================
           IF (W0ICL = SPACES) THEN
      *        *Initial call
               MOVE 'Y' TO W0ICL
           ELSE
               MOVE 'N' TO W0ICL
           END-IF
           MOVE SPACES TO P0RTN
           MOVE SPACES TO W0RTN
           MOVE ZEROS  TO W0RTW
           MOVE SPACES TO W0RSF
           MOVE '400' TO W0ENV
           MOVE ALL B'0' TO INDICS
      *    Retrieve job attributes
           CALL 'Y2RTJBR' USING
             JOB-CONTEXT
           END-CALL
      *    Setup job date/time
           MOVE ZZSDT OF JOB-CONTEXT TO ZZJDT
           ACCEPT ZZTIME FROM TIME
           MOVE ZZHNS TO ZZJTM OF JOB-CONTEXT
      *    Set century digit (If YY prior to 1940 treat as 20YY)
           IF (ZZJYY < 40) THEN
               MOVE 1 TO ZZJCC
           ELSE
               MOVE 0 TO ZZJCC
           END-IF
           MOVE 'ACPDSPAPCS' TO ZZPGM OF JOB-CONTEXT
           MOVE ZEROS TO ZZCSRW OF ZSFLCTL-WS-O
           MOVE ZEROS TO ZZCSCL OF ZSFLCTL-WS-O
      *
      *    Initialize array variables
      *    Flag no *SET CURSOR in the program
           MOVE 'N' TO YSETCS
           MOVE SPACES TO WCSRLC
      *
      *    Signal first error message outstanding
           MOVE 'Y' TO ZAFSMS
      *    Open files
           OPEN I-O ACPDSPAPCD
           OPEN INPUT ACBATAPPL1
           ACCEPT ACBATAPPL1-OPEN FROM OPEN-FEEDBACK-AREA FOR ACBATAPPL1
      *    Move main file information to JOB context
           MOVE CORRESPONDING OPENFA OF ACBATAPPL1-OPEN TO JOB-CONTEXT
           CALL 'Y2QLVNR' USING
             ZZFFL OF JOB-CONTEXT
             ZZFLB OF JOB-CONTEXT
             ZZFQL OF JOB-CONTEXT
           END-CALL
           MOVE 'Y' TO W0OPN
           MOVE 'N' TO W0PMT
      *    Subfile page
           MOVE 12 TO ZZSFPG
      *    Subfile record number
           MOVE 1 TO ZZSFRC OF ZSFLCTL-WS-O
      *    Maximum record number
           MOVE ZERO TO ZZRRMX
      *    Scan limit
           MOVE 500 TO W0SLM
      *    Subfile pages
           MOVE 1 TO W0SPG
      *    Processed Subfile record
           MOVE ZERO TO W0RR0
      *..............................................................
           MOVE 'ACPDSPAPCS' TO ZZPGM OF ZSFLCTL-WS-O
           MOVE ZZUSR OF JOB-CONTEXT TO ZZUSR OF ACPDSPAPCD-WS-O
           MOVE ZZJOB OF JOB-CONTEXT TO ZZJOB OF ACPDSPAPCD-WS-O
      *    Initialise subfile control
           PERFORM MEIZZ2
      *==============================================================
           CONTINUE.
       ZZEXIT.
           EXIT.
